// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tYnATWpXvamc4qoKngShFe
// Component: nBDrfptYuKXb

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: A0JY-HhsMkxb/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import YouTube from "@plasmicpkgs/react-youtube";

import { useScreenVariants as useScreenVariantseTVinTmmxAs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: e_TVinTmmxAS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_vercel_workflow.module.css"; // plasmic-import: tYnATWpXvamc4qoKngShFe/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: nBDrfptYuKXb/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: lQQPzEOFkuDv/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: YEJ05k9L14jB/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: pcFIICfD87kM/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: cvU6_yS_vvpT/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: Sh-XsIg5JwQC/icon
import imageYYiAEhDpaWc5 from "./images/image.svg"; // plasmic-import: YYiAEhDpaWc5/picture
import image23LHlOZikHkQw from "./images/image2.png"; // plasmic-import: 3lHlOZikHkQw/picture
import image3Cw9VSlY5Yn5W from "./images/image3.svg"; // plasmic-import: Cw9VSlY5YN5W/picture
import image4Ti5HNSiHxOzy from "./images/image4.png"; // plasmic-import: TI5hNSiHxOzy/picture
import image5TQbQDwaolNTx from "./images/image5.svg"; // plasmic-import: tQbQDwaolNTx/picture

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  youTube?: p.Flex<typeof YouTube>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const $$ = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseTVinTmmxAs()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rtS9O)}
          >
            <Icon6Icon
              className={classNames(projectcss.all, sty.svg___7BDwV)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__vRiBk)} />

            <Button
              className={classNames("__wab_instance", sty.button__biQmH)}
              color={"white"}
              submitsForm={true}
            >
              {"Start trial"}
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__tEvZ7)}
              color={"clear"}
              submitsForm={true}
            >
              {"Book demo"}
            </Button>
          </p.Stack>
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__wbZep
            )}
          >
            {"A better way to build software"}
          </h1>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tXdBf
            )}
          >
            {
              "Go from idea to production with the fastest workflow for frontend teams."
            }
          </div>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__hyr5O)}
            role={"img"}
          />

          <div className={classNames(projectcss.all, sty.freeBox___628Z)}>
            <div className={classNames(projectcss.all, sty.freeBox__o2LZv)}>
              <div className={classNames(projectcss.all, sty.freeBox__lBxZn)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qHjXq
                  )}
                >
                  {"1"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__y8Cuv)} />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__dgbi0)}>
              <div className={classNames(projectcss.all, sty.freeBox__ivIlx)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__muDm5)}
                  triggerOnce={true}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__rxg1T
                    )}
                  >
                    {"Develop"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cHlB
                    )}
                  >
                    {
                      "Unlock developer productivity. Long builds, complex config, and disjointed tools break the development process. Remove the obstacles individual contributors face by giving them a better toolkit."
                    }
                  </div>
                </Reveal>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__nu0Kx)}>
                <div className={classNames(projectcss.all, sty.freeBox__qoCOx)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__oqWAp, "rotate")}
                    displayHeight={"900px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"900px"}
                    loading={"lazy"}
                    src={{
                      src: imageYYiAEhDpaWc5,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hpkKj)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__obIy)}
                  triggerOnce={true}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__br9Z6)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__mngzx)}
                      displayHeight={"50px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: image23LHlOZikHkQw,
                        fullWidth: 602,
                        fullHeight: 273,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ddP9N
                      )}
                    >
                      {"73%"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bW4I6
                      )}
                    >
                      {"faster project creation with Vercel"}
                    </div>
                  </div>
                </Reveal>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__oQwpz)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__fBcEh)}
                  triggerOnce={true}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__iV2Yy)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__qJcaM
                      )}
                    >
                      {"4 ways to improve your frontend workflow"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__doyW3
                      )}
                    >
                      {
                        "Learn what makes a healthy Web development workflow and how Vercel accelerates that journey at every stage while making the developer experience genuinely great."
                      }
                    </div>
                    <Button
                      className={classNames("__wab_instance", sty.button__pNr6)}
                      color={"white"}
                      submitsForm={true}
                    >
                      {"Get the guide"}
                    </Button>
                  </p.Stack>
                </Reveal>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jVvtp)}>
            <div className={classNames(projectcss.all, sty.freeBox__jba1O)}>
              <div className={classNames(projectcss.all, sty.freeBox__fwCN)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xRXhV
                  )}
                >
                  {"2"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__tBnG3)} />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__aj2Hr)}>
              <div className={classNames(projectcss.all, sty.freeBox__pVFjd)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__lPaxd)}
                  triggerOnce={true}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__gi8Sy
                    )}
                  >
                    {"Preview"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jQrkw
                    )}
                  >
                    {
                      "Collaborate instantly. Automatic production-grade staging and zero-config CI/CD makes it fast and easy to collect feedback and share ideas across teams."
                    }
                  </div>
                </Reveal>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hSmG)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__xwmZ7)}
                  triggerOnce={true}
                >
                  <YouTube
                    data-plasmic-name={"youTube"}
                    data-plasmic-override={overrides.youTube}
                    className={classNames("__wab_instance", sty.youTube)}
                    videoId={"R6MeLqRQzYw"}
                  />
                </Reveal>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__q1C95)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__kPVgU)}
                  triggerOnce={true}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eo5A1)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__xeMli)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"175px"}
                      loading={"lazy"}
                      src={{
                        src: image3Cw9VSlY5Yn5W,
                        fullWidth: 300,
                        fullHeight: 45,
                        aspectRatio: 6.729167
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bPhcE
                      )}
                    >
                      {"77%"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v3FA8
                      )}
                    >
                      {"faster builds with Vercel and Next.js"}
                    </div>
                  </div>
                </Reveal>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hUzu0)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal___9MmX)}
                  triggerOnce={true}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__cNjMd)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__emAh4
                      )}
                    >
                      {"1.2M"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tjshY
                      )}
                    >
                      {"faster builds with Vercel and Next.js"}
                    </div>
                  </p.Stack>
                </Reveal>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__xCHe4)}>
            <div className={classNames(projectcss.all, sty.freeBox__i6QV5)}>
              <div className={classNames(projectcss.all, sty.freeBox___0Xbjm)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5232X
                  )}
                >
                  {"3"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hzcxP)} />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__jRtRg)}>
              <div className={classNames(projectcss.all, sty.freeBox__y82TW)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__w7K0
                  )}
                >
                  {"Ship"}
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dI27I
                  )}
                >
                  {
                    "Great DX leads to great UX. Focus your team on measuring and iterating instead of managing infrastructure, performance, and security."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__uQv4P)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__wa0O)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"196px"}
                  loading={"lazy"}
                  src={{
                    src: image4Ti5HNSiHxOzy,
                    fullWidth: 300,
                    fullHeight: 68,
                    aspectRatio: undefined
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__eppse)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dqBbg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zHwRw
                      )}
                    >
                      {"90"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vMuZr
                    )}
                  >
                    {"Site performance score with Vercel"}
                  </div>
                </div>
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kSvz3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kaBzx
                  )}
                >
                  {"25B+"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fh8Jg
                  )}
                >
                  {"requests per week to Vercel\u2019s Edge network"}
                </div>
              </p.Stack>
            </div>
          </div>
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__raEyN
            )}
          >
            {"Develop, preview, and ship faster with Vercel"}
          </h1>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ygvrq)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qsYw)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aXSwf)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__oaJv5
                  )}
                >
                  {"4 ways to improve your frontend workflow"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b09D6
                  )}
                >
                  {
                    "Learn what makes a healthy Web development workflow and how Vercel accelerates that journey at every stage while making the developer experience genuinely great."
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__zQWvm)}
                  color={"white"}
                  submitsForm={true}
                >
                  {"Get the guide"}
                </Button>
              </p.Stack>
              <Icon5Icon
                className={classNames(projectcss.all, sty.svg__idq5F)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__qkYNm)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vvlDw)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__y1DdR
                  )}
                >
                  {"4 ways to improve your frontend workflow"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rokHu
                  )}
                >
                  {
                    "Learn what makes a healthy Web development workflow and how Vercel accelerates that journey at every stage while making the developer experience genuinely great."
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__iTzvv)}
                  color={"white"}
                  submitsForm={true}
                >
                  {"Get the guide"}
                </Button>
              </p.Stack>
              <Icon5Icon
                className={classNames(projectcss.all, sty.svg__l0FvO)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___4X3B3)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sGaMf)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__mrOCo
                  )}
                >
                  {"4 ways to improve your frontend workflow"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8CoMl
                  )}
                >
                  {
                    "Learn what makes a healthy Web development workflow and how Vercel accelerates that journey at every stage while making the developer experience genuinely great."
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__hmY9K)}
                  color={"white"}
                  submitsForm={true}
                >
                  {"Get the guide"}
                </Button>
              </p.Stack>
              <Icon5Icon
                className={classNames(projectcss.all, sty.svg__gnhki)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___8DiSw)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oq0NL)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__ctOqB
                  )}
                >
                  {"4 ways to improve your frontend workflow"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ocYfX
                  )}
                >
                  {
                    "Learn what makes a healthy Web development workflow and how Vercel accelerates that journey at every stage while making the developer experience genuinely great."
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__dKo)}
                  color={"white"}
                  submitsForm={true}
                >
                  {"Get the guide"}
                </Button>
              </p.Stack>
              <Icon5Icon
                className={classNames(projectcss.all, sty.svg__xrJWm)}
                role={"img"}
              />
            </div>
          </p.Stack>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__g1FZm)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"460px"}
            loading={"lazy"}
            src={{
              src: image5TQbQDwaolNTx,
              fullWidth: 156,
              fullHeight: 150,
              aspectRatio: 1.040541
            }}
          />

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__loPcp
            )}
          >
            {"Unlock a better workflow. Make the Web. Faster."}
          </h2>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rQ37O)}
          >
            <Button
              className={classNames("__wab_instance", sty.button___3Bf2I)}
              color={"white"}
              submitsForm={true}
            >
              {"Start trial"}
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__nQPb)}
              color={"clear"}
              submitsForm={true}
            >
              {"Book demo"}
            </Button>
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "youTube"],
  youTube: ["youTube"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  youTube: typeof YouTube;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    youTube: makeNodeComponent("youTube"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
